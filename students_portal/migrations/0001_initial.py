# Generated by Django 5.1.2 on 2025-03-28 23:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('code', models.CharField(max_length=10)),
                ('weight_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GradeSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.CharField(max_length=2)),
                ('min_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('max_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('points', models.DecimalField(decimal_places=1, max_digits=3)),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('credit_hours', models.IntegerField(default=3)),
                ('is_core', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('lecturer', 'Lecturer'), ('admin', 'Administrator'), ('staff', 'Administrative Staff'), ('finance', 'Finance Officer')], max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('last_password_change', models.DateTimeField(default=django.utils.timezone.now)),
                ('password_reset_token', models.CharField(blank=True, max_length=100, null=True)),
                ('password_reset_token_expiry', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='students_portal.faculty')),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staff_id', models.CharField(max_length=20, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('national_id', models.CharField(blank=True, max_length=20, null=True)),
                ('qualification', models.CharField(blank=True, max_length=100, null=True)),
                ('specialization', models.CharField(blank=True, max_length=200, null=True)),
                ('academic_rank', models.CharField(blank=True, choices=[('professor', 'Professor'), ('associate_professor', 'Associate Professor'), ('senior_lecturer', 'Senior Lecturer'), ('lecturer', 'Lecturer'), ('assistant_lecturer', 'Assistant Lecturer'), ('tutorial_fellow', 'Tutorial Fellow'), ('graduate_assistant', 'Graduate Assistant')], max_length=50, null=True)),
                ('employment_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('visiting', 'Visiting'), ('adjunct', 'Adjunct')], default='full_time', max_length=50)),
                ('date_of_employment', models.DateField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('biography', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='lecturer_profiles/')),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('on_leave', 'On Leave'), ('sabbatical', 'Sabbatical'), ('terminated', 'Terminated'), ('retired', 'Retired')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lecturers', to='students_portal.department')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('announcement', 'Announcement'), ('grade', 'Grade Release'), ('exam', 'Exam Schedule'), ('fee', 'Fee Reminder'), ('registration', 'Registration'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Programme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('duration_years', models.IntegerField()),
                ('semesters_per_year', models.IntegerField(default=2)),
                ('description', models.TextField(blank=True, null=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programmes', to='students_portal.department')),
            ],
        ),
        migrations.CreateModel(
            name='FeesStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_of_study', models.IntegerField()),
                ('semester', models.IntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='students_portal.academicyear')),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='students_portal.programme')),
            ],
            options={
                'unique_together': {('programme', 'academic_year', 'year_of_study', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='ProgrammeUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_of_study', models.IntegerField()),
                ('semester', models.IntegerField()),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programme_units', to='students_portal.programme')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programme_units', to='students_portal.unit')),
            ],
            options={
                'unique_together': {('programme', 'unit', 'year_of_study', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('number', models.IntegerField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='semesters', to='students_portal.academicyear')),
            ],
            options={
                'unique_together': {('academic_year', 'number')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(max_length=20, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('id_number', models.CharField(blank=True, max_length=20, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='lecturer_profiles/')),
                ('current_year', models.IntegerField()),
                ('current_semester', models.IntegerField()),
                ('date_of_admission', models.DateField()),
                ('expected_graduation_date', models.DateField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=10, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('religion', models.CharField(blank=True, max_length=50, null=True)),
                ('county', models.CharField(blank=True, max_length=50, null=True)),
                ('town', models.CharField(blank=True, max_length=50, null=True)),
                ('postal_address', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True)),
                ('parent_name', models.CharField(blank=True, max_length=100, null=True)),
                ('parent_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('graduated', 'Graduated'), ('deferred', 'Deferred'), ('suspended', 'Suspended'), ('transferred', 'Transferred'), ('withdrawn', 'Withdrawn')], default='active', max_length=20)),
                ('entry_mode', models.CharField(choices=[('government_sponsored', 'Government-Sponsored'), ('self_sponsored', 'Self-Sponsored'), ('parallel', 'Parallel'), ('exchange', 'Exchange'), ('transfer', 'Transfer')], default='government_sponsored', max_length=20)),
                ('scholarship_info', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='students_portal.programme')),
            ],
        ),
        migrations.CreateModel(
            name='StudentEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('programme_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='students_portal.programmeunit')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='students_portal.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='students_portal.student')),
            ],
            options={
                'unique_together': {('student', 'programme_unit', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='StudentFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('balance', models.DecimalField(decimal_places=2, max_digits=10)),
                ('last_payment_date', models.DateField(blank=True, null=True)),
                ('fee_structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_fees', to='students_portal.feesstructure')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_records', to='students_portal.student')),
            ],
        ),
        migrations.CreateModel(
            name='FeePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField()),
                ('receipt_number', models.CharField(max_length=50, unique=True)),
                ('payment_method', models.CharField(max_length=50)),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_payments', to=settings.AUTH_USER_MODEL)),
                ('student_fee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='students_portal.studentfee')),
            ],
        ),
        migrations.CreateModel(
            name='StudentUnitGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cat_average', models.DecimalField(decimal_places=2, max_digits=5)),
                ('exam_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('total_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('is_pass', models.BooleanField()),
                ('remarks', models.TextField(blank=True, null=True)),
                ('enrollment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='final_grade', to='students_portal.studentenrollment')),
                ('grade', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='student_grades', to='students_portal.gradesystem')),
            ],
        ),
        migrations.CreateModel(
            name='UnitAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_allocations', to='students_portal.lecturer')),
                ('programme_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_allocations', to='students_portal.programmeunit')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_allocations', to='students_portal.semester')),
            ],
            options={
                'unique_together': {('lecturer', 'programme_unit', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='AttendanceRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('topic', models.CharField(blank=True, max_length=200, null=True)),
                ('unit_allocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='students_portal.unitallocation')),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('max_score', models.DecimalField(decimal_places=2, default=100.0, max_digits=5)),
                ('date', models.DateField()),
                ('assessment_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='students_portal.assessmenttype')),
                ('unit_allocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='students_portal.unitallocation')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notifications', to='students_portal.notification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_present', models.BooleanField(default=False)),
                ('remarks', models.CharField(blank=True, max_length=100, null=True)),
                ('attendance_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_attendances', to='students_portal.attendancerecord')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='students_portal.student')),
            ],
            options={
                'unique_together': {('attendance_record', 'student')},
            },
        ),
        migrations.CreateModel(
            name='StudentScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('submitted_date', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='students_portal.assessment')),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='students_portal.studentenrollment')),
            ],
            options={
                'unique_together': {('enrollment', 'assessment')},
            },
        ),
    ]
